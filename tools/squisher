#!/bin/bash
#
# Squish a CM otapackage for distribution
# cyanogen
#
. $ANDROID_BUILD_TOP/vendor/to/tools/functions

OUT_TARGET_HOST=`uname -a | grep Darwin`
if [ -z "$OUT_TARGET_HOST" ]
then
   OUT_TARGET_HOST=linux-x86
   MD5=md5sum
   XARGS="xargs --max-args=1 --max-procs $TO_OR"
   SED=sed
else
   OUT_TARGET_HOST=darwin-x86
   MD5=md5
   XARGS="xargs -n 1 -P `sysctl hw.ncpu | awk '{print $2}'`"
   SED=gsed
fi

if [ -z "$OUT" -o ! -d "$OUT" ]; then
	echo -e $CL_RED"ERROR: $0 only works with a full build environment. $OUT should exist."$CL_RST
	exit 1
fi

OPTICHARGER=$ANDROID_BUILD_TOP/vendor/to/tools/opticharger
QUIET=-q
DELETE_BINS="applypatch applypatch_static check_prereq recovery updater"
DELETE_LIBS="libc_malloc_debug_leak.so libc_malloc_debug_qemu.so"
DELETE_FONTS="MTLmr3m.ttf"
DELETE_MEDIA="*.qmg"

REPACK=$OUT/repack.d
echo -e "Sanitizing Environment..."
rm -rf $REPACK
mkdir -p $REPACK
echo -e

# Unpack the otapackage and opticharge all apks
mkdir $REPACK/ota
(
cd $REPACK/ota
echo -e "Unpacking $OTAPACKAGE..."
unzip $QUIET $OTAPACKAGE
echo -e

#add SuperSu
cp -r $OUT/supersu $REPACK/ota/

# Move all apks to the same directory so xargs can
# use also with framework-res.apk. This allow process
# framework-res.apk in parallel with other apks
mkdir -p $REPACK/parallel
cd $REPACK/parallel

find $REPACK/ota/system -name '*.apk' | while read APK; do
    ln -s $APK .
done

# Do optimization in parallel
find ./ -name \*.apk | $XARGS $OPTICHARGER

# Return to directory
cd $REPACK/ota
rm -rf $REPACK/parallel
)

# Fix build.prop
$SED -i \
	-e '/ro\.kernel\.android\.checkjni/d' \
	-e '/ro\.build\.type/s/eng/user/' \
	$REPACK/ota/system/build.prop

# Determine what to name the new signed package
MODVERSION=`sed -n -e'/ro\.to\.version/s/^.*=//p' $OUT/system/build.prop`
# Check for '_' in product name
if [ "`echo -e $TARGET_PRODUCT | cut -d '_' -f3`" != "" ]
then
TARGET_PRODUCT_FINAL=`echo -e $TARGET_PRODUCT | cut -d '_' -f2,3`
else
TARGET_PRODUCT_FINAL=`echo -e $TARGET_PRODUCT | cut -d '_' -f2`
fi
echo -e $CL_CYN"MODVERSION: $MODVERSION"$CL_RST
OUTFILE=$OUT/$MODVERSION-$TARGET_PRODUCT_FINAL.zip

# Delete unnecessary binaries
( cd $REPACK/ota/system/bin; echo -e $DELETE_BINS | xargs rm -f; )

# Delete unnecessary libraries
( cd $REPACK/ota/system/lib; echo -e $DELETE_LIBS | xargs rm -f; )

# Delete Offline charging mode files
( cd $REPACK/ota/system/media; echo -e $DELETE_MEDIA | xargs rm -f; )

if [ "$TARGET_PRODUCT_FINAL" != "infuse4g" ]
then
# No need for modem.bin
rm -f $REPACK/ota/modem.bin
fi

# No need for media/video
rm -rf $REPACK/ota/system/media/video

# Delete Unnecessary Fonts
( cd $REPACK/ota/system/fonts; echo -e $DELETE_FONTS | xargs rm -f; )

# No need for tts
rm -rf $REPACK/ota/system/tts

# No need for srec
rm -rf $REPACK/ota/system/usr/srec

# No need for recovery
rm -rf $REPACK/ota/recovery
rm -rf $REPACK/ota/system/etc/recovery-resource.dat

# Strip modules
[ -d $REPACK/ota/system/lib/modules ] && \
	find $REPACK/ota/system/lib/modules -name "*.ko" -print0 | xargs -0 arm-eabi-strip --strip-unneeded

if [ "$TO_CHANGELOG" = true ]
then
# Add changelog
. $ANDROID_BUILD_TOP/vendor/to/tools/changelog
else
echo -e "No changelog..."
echo -e
fi

# Pack it up and sign
echo -e "Zipping package..."
( cd $REPACK/ota; zip $QUIET -r $REPACK/update.zip . )
echo -e
echo -e "Signing package..."
SECURITYDIR=$ANDROID_BUILD_TOP/build/target/product/security
java -Xmx1024m \
	-jar $OUT/../../../host/$OUT_TARGET_HOST/framework/signapk.jar \
	-w $SECURITYDIR/testkey.x509.pem $SECURITYDIR/testkey.pk8 \
	$REPACK/update.zip $OUTFILE
echo -e
echo -e "Cleaning up..."
rm -rf $REPACK
echo -e

echo -e $CL_CYN"▄▄▄█████▓▓█████ ▄▄▄       ███▄ ▄███▓    ▒█████   ▄████▄  ▄▄▄█████▓ ▒█████    ██████"$CL_RST
echo -e $CL_CYN"▓  ██▒ ▓▒▓█   ▀▒████▄    ▓██▒▀█▀ ██▒   ▒██▒  ██▒▒██▀ ▀█  ▓  ██▒ ▓▒▒██▒  ██▒▒██    ▒"$CL_RST
echo -e $CL_CYN"▒ ▓██░ ▒░▒███  ▒██  ▀█▄  ▓██    ▓██░   ▒██░  ██▒▒▓█    ▄ ▒ ▓██░ ▒░▒██░  ██▒░ ▓██▄ "$CL_RST  
echo -e $CL_CYN"░ ▓██▓ ░ ▒▓█  ▄░██▄▄▄▄██ ▒██    ▒██    ▒██   ██░▒▓▓▄ ▄██▒░ ▓██▓ ░ ▒██   ██░  ▒   ██▒"$CL_RST
echo -e $CL_CYN"  ▒██▒ ░ ░▒████▒▓█   ▓██▒▒██▒   ░██▒   ░ ████▓▒░▒ ▓███▀ ░  ▒██▒ ░ ░ ████▓▒░▒██████▒▒"$CL_RST
echo -e $CL_CYN"  ▒ ░░   ░░ ▒░ ░▒▒   ▓▒█░░ ▒░   ░  ░   ░ ▒░▒░▒░ ░ ░▒ ▒  ░  ▒ ░░   ░ ▒░▒░▒░ ▒ ▒▓▒ ▒ ░"$CL_RST
echo -e $CL_CYN"    ░     ░ ░  ░ ▒   ▒▒ ░░  ░      ░     ░ ▒ ▒░   ░  ▒       ░      ░ ▒ ▒░ ░ ░▒  ░ ░"$CL_RST
echo -e $CL_CYN"  ░         ░    ░   ▒   ░      ░      ░ ░ ░ ▒  ░          ░      ░ ░ ░ ▒  ░  ░  ░"$CL_RST  
echo -e $CL_CYN"            ░  ░     ░  ░       ░          ░ ░  ░ ░                   ░ ░        ░"$CL_RST  
echo -e $CL_CYN"                                                ░"$CL_RST

# Create a md5 checksum image of the repacked package
(
img=`basename $OUTFILE`
cd `dirname $OUTFILE`
$MD5 $img >$img.md5
echo -e
echo -e $CL_CYN"===========-Package complete-==========="$CL_RST
echo -e $CL_CYN"zip:"$CL_MAG" $OUTFILE"$CL_RST
echo -e $CL_CYN"md5:"$CL_MAG" $(cat $img.md5 | awk '{ print $1 }')"$CL_RST
echo -e $CL_CYN"size:"$CL_MAG" $(ls -lah $OUTFILE | awk '{ print $5}') ($(ls -la $OUTFILE | awk '{ print $5}'))"$CL_RST
echo -e $CL_CYN"========================================"$CL_RST
echo -e
)

exit 0
